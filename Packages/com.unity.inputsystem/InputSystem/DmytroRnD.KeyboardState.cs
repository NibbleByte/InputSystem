using System.Runtime.InteropServices;

namespace UnityEngine.InputSystem.DmytroRnD
{
    [StructLayout(LayoutKind.Explicit, Size = 14, Pack = 1)]
    internal unsafe struct NativeKeyboardState 
    {
        public const int kSizeInBits = Keyboard.KeyCount;
        public const int kSizeInBytes = (kSizeInBits + 7) / 8;

        // [InputControl(name = "anyKey", displayName = "Any Key", layout = "AnyKey", sizeInBits = kSizeInBits - 1, synthetic = true)] // Exclude IMESelected.
        // [InputControl(name = "escape", displayName = "Escape", layout = "Key", usages = new[] {"Back", "Cancel"}, bit = (int)Key.Escape)]
        // [InputControl(name = "space", displayName = "Space", layout = "Key", bit = (int)Key.Space)]
        // [InputControl(name = "enter", displayName = "Enter", layout = "Key", usage = "Submit", bit = (int)Key.Enter)]
        // [InputControl(name = "tab", displayName = "Tab", layout = "Key", bit = (int)Key.Tab)]
        // [InputControl(name = "backquote", displayName = "`", layout = "Key", bit = (int)Key.Backquote)]
        // [InputControl(name = "quote", displayName = "'", layout = "Key", bit = (int)Key.Quote)]
        // [InputControl(name = "semicolon", displayName = ";", layout = "Key", bit = (int)Key.Semicolon)]
        // [InputControl(name = "comma", displayName = ",", layout = "Key", bit = (int)Key.Comma)]
        // [InputControl(name = "period", displayName = ".", layout = "Key", bit = (int)Key.Period)]
        // [InputControl(name = "slash", displayName = "/", layout = "Key", bit = (int)Key.Slash)]
        // [InputControl(name = "backslash", displayName = "\\", layout = "Key", bit = (int)Key.Backslash)]
        // [InputControl(name = "leftBracket", displayName = "[", layout = "Key", bit = (int)Key.LeftBracket)]
        // [InputControl(name = "rightBracket", displayName = "]", layout = "Key", bit = (int)Key.RightBracket)]
        // [InputControl(name = "minus", displayName = "-", layout = "Key", bit = (int)Key.Minus)]
        // [InputControl(name = "equals", displayName = "=", layout = "Key", bit = (int)Key.Equals)]
        // [InputControl(name = "upArrow", displayName = "Up Arrow", layout = "Key", bit = (int)Key.UpArrow)]
        // [InputControl(name = "downArrow", displayName = "Down Arrow", layout = "Key", bit = (int)Key.DownArrow)]
        // [InputControl(name = "leftArrow", displayName = "Left Arrow", layout = "Key", bit = (int)Key.LeftArrow)]
        // [InputControl(name = "rightArrow", displayName = "Right Arrow", layout = "Key", bit = (int)Key.RightArrow)]
        // [InputControl(name = "a", displayName = "A", layout = "Key", bit = (int)Key.A)]
        // [InputControl(name = "b", displayName = "B", layout = "Key", bit = (int)Key.B)]
        // [InputControl(name = "c", displayName = "C", layout = "Key", bit = (int)Key.C)]
        // [InputControl(name = "d", displayName = "D", layout = "Key", bit = (int)Key.D)]
        // [InputControl(name = "e", displayName = "E", layout = "Key", bit = (int)Key.E)]
        // [InputControl(name = "f", displayName = "F", layout = "Key", bit = (int)Key.F)]
        // [InputControl(name = "g", displayName = "G", layout = "Key", bit = (int)Key.G)]
        // [InputControl(name = "h", displayName = "H", layout = "Key", bit = (int)Key.H)]
        // [InputControl(name = "i", displayName = "I", layout = "Key", bit = (int)Key.I)]
        // [InputControl(name = "j", displayName = "J", layout = "Key", bit = (int)Key.J)]
        // [InputControl(name = "k", displayName = "K", layout = "Key", bit = (int)Key.K)]
        // [InputControl(name = "l", displayName = "L", layout = "Key", bit = (int)Key.L)]
        // [InputControl(name = "m", displayName = "M", layout = "Key", bit = (int)Key.M)]
        // [InputControl(name = "n", displayName = "N", layout = "Key", bit = (int)Key.N)]
        // [InputControl(name = "o", displayName = "O", layout = "Key", bit = (int)Key.O)]
        // [InputControl(name = "p", displayName = "P", layout = "Key", bit = (int)Key.P)]
        // [InputControl(name = "q", displayName = "Q", layout = "Key", bit = (int)Key.Q)]
        // [InputControl(name = "r", displayName = "R", layout = "Key", bit = (int)Key.R)]
        // [InputControl(name = "s", displayName = "S", layout = "Key", bit = (int)Key.S)]
        // [InputControl(name = "t", displayName = "T", layout = "Key", bit = (int)Key.T)]
        // [InputControl(name = "u", displayName = "U", layout = "Key", bit = (int)Key.U)]
        // [InputControl(name = "v", displayName = "V", layout = "Key", bit = (int)Key.V)]
        // [InputControl(name = "w", displayName = "W", layout = "Key", bit = (int)Key.W)]
        // [InputControl(name = "x", displayName = "X", layout = "Key", bit = (int)Key.X)]
        // [InputControl(name = "y", displayName = "Y", layout = "Key", bit = (int)Key.Y)]
        // [InputControl(name = "z", displayName = "Z", layout = "Key", bit = (int)Key.Z)]
        // [InputControl(name = "1", displayName = "1", layout = "Key", bit = (int)Key.Digit1)]
        // [InputControl(name = "2", displayName = "2", layout = "Key", bit = (int)Key.Digit2)]
        // [InputControl(name = "3", displayName = "3", layout = "Key", bit = (int)Key.Digit3)]
        // [InputControl(name = "4", displayName = "4", layout = "Key", bit = (int)Key.Digit4)]
        // [InputControl(name = "5", displayName = "5", layout = "Key", bit = (int)Key.Digit5)]
        // [InputControl(name = "6", displayName = "6", layout = "Key", bit = (int)Key.Digit6)]
        // [InputControl(name = "7", displayName = "7", layout = "Key", bit = (int)Key.Digit7)]
        // [InputControl(name = "8", displayName = "8", layout = "Key", bit = (int)Key.Digit8)]
        // [InputControl(name = "9", displayName = "9", layout = "Key", bit = (int)Key.Digit9)]
        // [InputControl(name = "0", displayName = "0", layout = "Key", bit = (int)Key.Digit0)]
        // [InputControl(name = "leftShift", displayName = "Left Shift", layout = "Key", usage = "Modifier", bit = (int)Key.LeftShift)]
        // [InputControl(name = "rightShift", displayName = "Right Shift", layout = "Key", usage = "Modifier", bit = (int)Key.RightShift)]
        // [InputControl(name = "shift", displayName = "Shift", layout = "DiscreteButton", usage = "Modifier", bit = (int)Key.LeftShift, sizeInBits = 2, synthetic = true, parameters = "minValue=1,maxValue=3")]
        // [InputControl(name = "leftAlt", displayName = "Left Alt", layout = "Key", usage = "Modifier", bit = (int)Key.LeftAlt)]
        // [InputControl(name = "rightAlt", displayName = "Right Alt", layout = "Key", usage = "Modifier", bit = (int)Key.RightAlt, alias = "AltGr")]
        // [InputControl(name = "alt", displayName = "Alt", layout = "DiscreteButton", usage = "Modifier", bit = (int)Key.LeftAlt, sizeInBits = 2, synthetic = true, parameters = "minValue=1,maxValue=3")]
        // [InputControl(name = "leftCtrl", displayName = "Left Control", layout = "Key", usage = "Modifier", bit = (int)Key.LeftCtrl)]
        // [InputControl(name = "rightCtrl", displayName = "Right Control", layout = "Key", usage = "Modifier", bit = (int)Key.RightCtrl)]
        // [InputControl(name = "ctrl", displayName = "Control", layout = "DiscreteButton", usage = "Modifier", bit = (int)Key.LeftCtrl, sizeInBits = 2, synthetic = true, parameters = "minValue=1,maxValue=3")]
        // [InputControl(name = "leftMeta", displayName = "Left System", layout = "Key", usage = "Modifier", bit = (int)Key.LeftMeta, aliases = new[] { "LeftWindows", "LeftApple", "LeftCommand" })]
        // [InputControl(name = "rightMeta", displayName = "Right System", layout = "Key", usage = "Modifier", bit = (int)Key.RightMeta, aliases = new[] { "RightWindows", "RightApple", "RightCommand" })]
        // [InputControl(name = "contextMenu", displayName = "Context Menu", layout = "Key", usage = "Modifier", bit = (int)Key.ContextMenu)]
        // [InputControl(name = "backspace", displayName = "Backspace", layout = "Key", bit = (int)Key.Backspace)]
        // [InputControl(name = "pageDown", displayName = "Page Down", layout = "Key", bit = (int)Key.PageDown)]
        // [InputControl(name = "pageUp", displayName = "Page Up", layout = "Key", bit = (int)Key.PageUp)]
        // [InputControl(name = "home", displayName = "Home", layout = "Key", bit = (int)Key.Home)]
        // [InputControl(name = "end", displayName = "End", layout = "Key", bit = (int)Key.End)]
        // [InputControl(name = "insert", displayName = "Insert", layout = "Key", bit = (int)Key.Insert)]
        // [InputControl(name = "delete", displayName = "Delete", layout = "Key", bit = (int)Key.Delete)]
        // [InputControl(name = "capsLock", displayName = "Caps Lock", layout = "Key", bit = (int)Key.CapsLock)]
        // [InputControl(name = "numLock", displayName = "Num Lock", layout = "Key", bit = (int)Key.NumLock)]
        // [InputControl(name = "printScreen", displayName = "Print Screen", layout = "Key", bit = (int)Key.PrintScreen)]
        // [InputControl(name = "scrollLock", displayName = "Scroll Lock", layout = "Key", bit = (int)Key.ScrollLock)]
        // [InputControl(name = "pause", displayName = "Pause/Break", layout = "Key", bit = (int)Key.Pause)]
        // [InputControl(name = "numpadEnter", displayName = "Numpad Enter", layout = "Key", bit = (int)Key.NumpadEnter)]
        // [InputControl(name = "numpadDivide", displayName = "Numpad /", layout = "Key", bit = (int)Key.NumpadDivide)]
        // [InputControl(name = "numpadMultiply", displayName = "Numpad *", layout = "Key", bit = (int)Key.NumpadMultiply)]
        // [InputControl(name = "numpadPlus", displayName = "Numpad +", layout = "Key", bit = (int)Key.NumpadPlus)]
        // [InputControl(name = "numpadMinus", displayName = "Numpad -", layout = "Key", bit = (int)Key.NumpadMinus)]
        // [InputControl(name = "numpadPeriod", displayName = "Numpad .", layout = "Key", bit = (int)Key.NumpadPeriod)]
        // [InputControl(name = "numpadEquals", displayName = "Numpad =", layout = "Key", bit = (int)Key.NumpadEquals)]
        // [InputControl(name = "numpad1", displayName = "Numpad 1", layout = "Key", bit = (int)Key.Numpad1)]
        // [InputControl(name = "numpad2", displayName = "Numpad 2", layout = "Key", bit = (int)Key.Numpad2)]
        // [InputControl(name = "numpad3", displayName = "Numpad 3", layout = "Key", bit = (int)Key.Numpad3)]
        // [InputControl(name = "numpad4", displayName = "Numpad 4", layout = "Key", bit = (int)Key.Numpad4)]
        // [InputControl(name = "numpad5", displayName = "Numpad 5", layout = "Key", bit = (int)Key.Numpad5)]
        // [InputControl(name = "numpad6", displayName = "Numpad 6", layout = "Key", bit = (int)Key.Numpad6)]
        // [InputControl(name = "numpad7", displayName = "Numpad 7", layout = "Key", bit = (int)Key.Numpad7)]
        // [InputControl(name = "numpad8", displayName = "Numpad 8", layout = "Key", bit = (int)Key.Numpad8)]
        // [InputControl(name = "numpad9", displayName = "Numpad 9", layout = "Key", bit = (int)Key.Numpad9)]
        // [InputControl(name = "numpad0", displayName = "Numpad 0", layout = "Key", bit = (int)Key.Numpad0)]
        // [InputControl(name = "f1", displayName = "F1", layout = "Key", bit = (int)Key.F1)]
        // [InputControl(name = "f2", displayName = "F2", layout = "Key", bit = (int)Key.F2)]
        // [InputControl(name = "f3", displayName = "F3", layout = "Key", bit = (int)Key.F3)]
        // [InputControl(name = "f4", displayName = "F4", layout = "Key", bit = (int)Key.F4)]
        // [InputControl(name = "f5", displayName = "F5", layout = "Key", bit = (int)Key.F5)]
        // [InputControl(name = "f6", displayName = "F6", layout = "Key", bit = (int)Key.F6)]
        // [InputControl(name = "f7", displayName = "F7", layout = "Key", bit = (int)Key.F7)]
        // [InputControl(name = "f8", displayName = "F8", layout = "Key", bit = (int)Key.F8)]
        // [InputControl(name = "f9", displayName = "F9", layout = "Key", bit = (int)Key.F9)]
        // [InputControl(name = "f10", displayName = "F10", layout = "Key", bit = (int)Key.F10)]
        // [InputControl(name = "f11", displayName = "F11", layout = "Key", bit = (int)Key.F11)]
        // [InputControl(name = "f12", displayName = "F12", layout = "Key", bit = (int)Key.F12)]
        // [InputControl(name = "OEM1", layout = "Key", bit = (int)Key.OEM1)]
        // [InputControl(name = "OEM2", layout = "Key", bit = (int)Key.OEM2)]
        // [InputControl(name = "OEM3", layout = "Key", bit = (int)Key.OEM3)]
        // [InputControl(name = "OEM4", layout = "Key", bit = (int)Key.OEM4)]
        // [InputControl(name = "OEM5", layout = "Key", bit = (int)Key.OEM5)]
        // [InputControl(name = "IMESelected", layout = "Button", bit = (int)Key.IMESelected, synthetic = true)]
        [FieldOffset(0)]
        public fixed byte Keys[kSizeInBytes];
    }
}