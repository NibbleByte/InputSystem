//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.1.0
//     from Assets/Dmytro.RnD/TestAsset.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @TestAsset : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @TestAsset()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""TestAsset"",
    ""maps"": [
        {
            ""name"": ""testmap"",
            ""id"": ""58e647bc-733d-4aa1-b0ca-1f23b6a2b0e2"",
            ""actions"": [
                {
                    ""name"": ""testaction"",
                    ""type"": ""Value"",
                    ""id"": ""f3517aae-9631-4a6e-9567-a75db0379f72"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """"
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2b9b84b6-ab03-447b-9105-16cb1e18af1c"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""testaction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cbaee7cc-c9ff-4628-ac87-4a27969e924a"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""testaction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e2fb7407-9e6f-4eb3-adfd-15e684a7741e"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""testaction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // testmap
        m_testmap = asset.FindActionMap("testmap", throwIfNotFound: true);
        m_testmap_testaction = m_testmap.FindAction("testaction", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // testmap
    private readonly InputActionMap m_testmap;
    private ITestmapActions m_TestmapActionsCallbackInterface;
    private readonly InputAction m_testmap_testaction;
    public struct TestmapActions
    {
        private @TestAsset m_Wrapper;
        public TestmapActions(@TestAsset wrapper) { m_Wrapper = wrapper; }
        public InputAction @testaction => m_Wrapper.m_testmap_testaction;
        public InputActionMap Get() { return m_Wrapper.m_testmap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TestmapActions set) { return set.Get(); }
        public void SetCallbacks(ITestmapActions instance)
        {
            if (m_Wrapper.m_TestmapActionsCallbackInterface != null)
            {
                @testaction.started -= m_Wrapper.m_TestmapActionsCallbackInterface.OnTestaction;
                @testaction.performed -= m_Wrapper.m_TestmapActionsCallbackInterface.OnTestaction;
                @testaction.canceled -= m_Wrapper.m_TestmapActionsCallbackInterface.OnTestaction;
            }
            m_Wrapper.m_TestmapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @testaction.started += instance.OnTestaction;
                @testaction.performed += instance.OnTestaction;
                @testaction.canceled += instance.OnTestaction;
            }
        }
    }
    public TestmapActions @testmap => new TestmapActions(this);
    public interface ITestmapActions
    {
        void OnTestaction(InputAction.CallbackContext context);
    }
}
